name: "ScanMalware"
description: "Runs malcontent diff between base commit and PR for malware scanning"

inputs:
  malcontent-image:
    description: "Fully qualified Malcontent image"
    required: false
    default: "cgr.dev/chainguard/malcontent@sha256:fdfca44c401a5ca98af51292a821278644895bc1963f7a76a733d76647ff0ede"
  before-dir:
    description: "Directory path for base commit files (optional)"
    required: false
  after-dir:
    description: "Directory path for PR commit files (optional)"
    required: false
  min-risk:
    description: "Minimum risk level to include in the report (e.g. low, medium, high, critical)"
    required: false
    default: "medium"
  exit-code:
    description: "Exit code to use when findings exceed the minimum risk threshold"
    required: false
    default: "1" 
outputs:
  diff-markdown:
    description: "Path to the malcontent diff Markdown report"
    value: ${{ steps.malcontentdiffmd.outputs.outfile_md }}
  diff-sarif:
    description: "Path to the malcontent SARIF report"
    value: malcontent.sarif

runs:
  using: "composite"
  steps:
    - name: Determine before/after dirs
      shell: bash
      run: |
        if [[ -n "${{ inputs.before-dir }}" && -n "${{ inputs.after-dir }}" ]]; then
          echo "Using provided directories for testing"
          echo "BEFORE_DIR=${{ inputs.before-dir }}" >> $GITHUB_ENV
          echo "AFTER_DIR=${{ inputs.after-dir }}" >> $GITHUB_ENV
        else
          echo "Using git diff between base and HEAD"
          BEFORE_DIR="${{ github.workspace }}/before"
          AFTER_DIR="${{ github.workspace }}/after"
          mkdir -p "$BEFORE_DIR" "$AFTER_DIR"
          echo "BEFORE_DIR=$BEFORE_DIR" >> $GITHUB_ENV
          echo "AFTER_DIR=$AFTER_DIR" >> $GITHUB_ENV
        fi
        
    - name: Checkout full repo history
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.1.1
      with:
        fetch-depth: 0

    - name: Extract base commit files
      if: ${{ !inputs.before-dir && !inputs.after-dir }}
      shell: bash
      run: |
        BASE_SHA=$(git merge-base HEAD origin/main)
        git --work-tree="$BEFORE_DIR" checkout "$BASE_SHA" -- .

    - name: Extract PR commit files
      if: ${{ !inputs.before-dir && !inputs.after-dir }}
      shell: bash
      run: |
        git --work-tree="$AFTER_DIR" checkout HEAD -- .

    - name: Pull malcontent image
      shell: bash
      run: docker pull "${{ inputs.malcontent-image }}"

    - name: Run malcontent diff JSON
      id: malcontentdiffjson
      shell: bash
      run: |
        OUTFILE="${{ github.workspace }}/malcontent-diff.json"
        MALCONTENT_JSON_CONTAINER_NAME=malcontent-diff-run-json
        OUTFILE_JSON_IN_CONTAINER="/home/nonroot/malcontent-diff.json"
        
        # Run malcontent diff to get the JSON but hide the console output
        docker run --name "$MALCONTENT_JSON_CONTAINER_NAME" \
          -v "$BEFORE_DIR:/home/nonroot/before" \
          -v "$AFTER_DIR:/home/nonroot/after" \
          "${{ inputs.malcontent-image }}" \
          --min-risk="${{ inputs.min-risk }}" \
          --format=json \
          --output="$OUTFILE_JSON_IN_CONTAINER" \
          diff /home/nonroot/before /home/nonroot/after > /dev/null 2>&1
        
        docker cp "$MALCONTENT_JSON_CONTAINER_NAME:$OUTFILE_JSON_IN_CONTAINER" "$OUTFILE"
        docker rm "$MALCONTENT_JSON_CONTAINER_NAME" > /dev/null
        echo "outfile=$OUTFILE" >> $GITHUB_OUTPUT
        
    - name: Run malcontent diff MD
      id: malcontentdiffmd
      shell: bash
      run: |    
        OUTFILE_MD="${{ github.workspace }}/malcontent-diff.md"
        MALCONTENT_MD_CONTAINER_NAME=malcontent-diff-run-md
        OUTFILE_MD_IN_CONTAINER="/home/nonroot/malcontent-diff.md"
      
        # Run malcontent diff a 2nd time for the markdown
        docker run --name "$MALCONTENT_MD_CONTAINER_NAME" \
          -v "$BEFORE_DIR:/home/nonroot/before" \
          -v "$AFTER_DIR:/home/nonroot/after" \
          "${{ inputs.malcontent-image }}" \
          --min-risk="${{ inputs.min-risk }}" \
          --format=markdown \
          --output="$OUTFILE_MD_IN_CONTAINER" \
          diff /home/nonroot/before /home/nonroot/after

        docker cp "$MALCONTENT_MD_CONTAINER_NAME:$OUTFILE_MD_IN_CONTAINER" "$OUTFILE_MD"
        docker rm "$MALCONTENT_MD_CONTAINER_NAME" > /dev/null
        echo "outfile_md=$OUTFILE_MD" >> $GITHUB_OUTPUT        
        
    - name: Upload Markdown diff report
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2 - 19 March 2025
      with:
        name: malcontent-diff-md
        path: ${{ steps.malcontentdiffmd.outputs.outfile_md }}

    - name: Append Markdown diff to job summary
      shell: bash
      run: cat "${{ steps.malcontentdiffmd.outputs.outfile_md }}" >> $GITHUB_STEP_SUMMARY

    - name: Detect Severity of Findings
      id: detect
      shell: bash
      run: |
        has_critical=false
        has_high=false
        has_medium=false
        has_low=false
        exit_code="${{ inputs.exit-code }}"
        
        JSON="${{ steps.malcontentdiffjson.outputs.outfile }}"
        echo "Dumping diff JSON:"
        cat "$JSON" | jq .
    
        if jq -e 'any(.Diff.Modified[].RiskLevel; . == "CRITICAL")' "$JSON" > /dev/null ||
           jq -e 'any(.Diff.Modified[].Behaviors[]?; .RiskLevel == "CRITICAL")' "$JSON" > /dev/null; then
          has_critical=true
        fi
    
        if jq -e 'any(.Diff.Modified[].RiskLevel; . == "HIGH")' "$JSON" > /dev/null ||
           jq -e 'any(.Diff.Modified[].Behaviors[]?; .RiskLevel == "HIGH")' "$JSON" > /dev/null; then
          has_high=true
        fi
    
        if jq -e 'any(.Diff.Modified[].RiskLevel; . == "MEDIUM")' "$JSON" > /dev/null ||
           jq -e 'any(.Diff.Modified[].Behaviors[]?; .RiskLevel == "MEDIUM")' "$JSON" > /dev/null; then
          has_medium=true
        fi
    
        if jq -e 'any(.Diff.Modified[].RiskLevel; . == "LOW")' "$JSON" > /dev/null ||
           jq -e 'any(.Diff.Modified[].Behaviors[]?; .RiskLevel == "LOW")' "$JSON" > /dev/null; then
          has_low=true
        fi
    
        echo "diff-json=$JSON" >> "$GITHUB_OUTPUT"
    
        echo "Configured minimum risk threshold: ${{ inputs.min-risk }}"
    
        case "${{ inputs.min-risk }}" in
          critical)
            if $has_critical; then
              echo "❌ Exiting: CRITICAL finding(s) detected"
              exit "$exit_code"
            fi
            ;;
          high)
            if $has_critical || $has_high; then
              echo "❌ Exiting: HIGH or CRITICAL finding(s) detected"
              exit "$exit_code"
            fi
            ;;
          medium)
            if $has_critical || $has_high || $has_medium; then
              echo "❌ Exiting: MEDIUM or higher finding(s) detected"
              exit "$exit_code"
            fi
            ;;
          low)
            if $has_critical || $has_high || $has_medium || $has_low; then
              echo "❌ Exiting: LOW or higher finding(s) detected"
              exit "$exit_code"
            fi
            ;;
          *)
            echo "⚠️ Unknown min-risk value: '${{ inputs.min-risk }}'. No exit enforced."
            ;;
        esac

    - name: Convert Malcontent JSON to SARIF
      shell: bash
      run: |
        python3 scripts/convert_to_sarif.py \
        --input "${{ steps.malcontentdiffjson.outputs.outfile }}" \
        --output "malcontent.sarif"

    - name: Print SARIF to console
      shell: bash
      run: cat malcontent.sarif
